{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "In this playbook the analysis of the sender takes place. It searches for specific keywords in the email body and subject, matches autohrized domains, and performs a VIP check. \nThe corrolation of the single elements defines a risk score for the sender.",
            "edges": [
                {
                    "id": "port_23_to_port_13",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_13_to_port_24",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_10_to_port_24",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_25",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_27_to_port_32",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_31_to_port_32",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_32_to_port_40",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "40",
                    "targetPort": "40_in"
                },
                {
                    "id": "port_40_to_port_41",
                    "sourceNode": "40",
                    "sourcePort": "40_out",
                    "targetNode": "41",
                    "targetPort": "41_in"
                },
                {
                    "id": "port_44_to_port_23",
                    "sourceNode": "44",
                    "sourcePort": "44_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_2_to_port_45",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "45",
                    "targetPort": "45_in"
                },
                {
                    "id": "port_45_to_port_44",
                    "sourceNode": "45",
                    "sourcePort": "45_out",
                    "targetNode": "44",
                    "targetPort": "44_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_13_to_port_10",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_0_to_port_48",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "48",
                    "targetPort": "48_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_48_to_port_2",
                    "sourceNode": "48",
                    "sourcePort": "48_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_38_to_port_31",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_27_to_port_38",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "id": "port_25_to_port_27",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                }
            ],
            "hash": "e52417a51c68003f7e7163d73d5a1ebd7fbb7988",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 100,
                    "y": -340.00000000000006
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 410,
                    "y": -2.842170943040401e-14
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "ADD tag VIP to Email Artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_update",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 7,
                        "functionName": "add_tag_vip_to_email_artifact",
                        "id": "10",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_update": {
                                "description": "Update an artifact with the specified attributes. All parameters are optional, except that cef_field and cef_value must both be provided if one is provided.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom artifact id"
                                        ],
                                        "description": "ID of the artifact to update, which is required.",
                                        "inputType": "item",
                                        "label": "artifact_id",
                                        "name": "artifact_id",
                                        "placeholder": "1234",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the name of the artifact.",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the label of the artifact.",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Change the severity of the artifact. Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional, but only operational if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_update",
                                "name": "artifact_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_update": {
                                "artifact_id": "create_email_artefact:custom_function_result.data.artifact_id",
                                "cef_data_type": null,
                                "cef_field": null,
                                "cef_value": null,
                                "input_json": null,
                                "label": null,
                                "name": null,
                                "severity": null,
                                "tags": "VIP"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "type": "utility",
                    "x": -100,
                    "y": 800
                },
                "13": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "matching_email_with_list:custom_function_result.data.match_count",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "match email groesser 0",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "13",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "decision",
                    "x": 200,
                    "y": 520
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Extract email from emailHeaders",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "regex_extract_email",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 1,
                        "functionName": "extract_email_from_emailheaders",
                        "id": "2",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "regex_extract_email": {
                                "description": "Provide a string with one or more email addresses in it to be extracted.\nCan be helpful with strings from the To or CC fields of an email: \"<other_email@domain.com>, 'Name' <e-mail@domain.com>\"",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "String containing email addresses",
                                        "inputType": "item",
                                        "label": "input_string",
                                        "name": "input_string",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "regex_extract_email",
                                "name": "regex_extract_email"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "regex_extract_email": {
                                "input_string": "filtered-data:filter_email_artifact:condition_1:artifact:*.cef.emailHeaders.From"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "type": "utility",
                    "x": 80,
                    "y": -60.00000000000006
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "matching email with list",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "custom_list_value_in_strings",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 5,
                        "functionName": "matching_email_with_list",
                        "id": "23",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "custom_list_value_in_strings": {
                                "description": "Iterates through all items of a custom list to see if any list value (i.e. \"sample.com\") exists in the input you are comparing it to (i.e \"findme.sample.com\"). Returns a list of matches, a list of misses, a count of matches, and a count of misses.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Name of the custom list. Every string in this list will be compared to see if it is a substring of any of the comparison_strings",
                                        "inputType": "item",
                                        "label": "custom_list",
                                        "name": "custom_list",
                                        "placeholder": "custom_list_name",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "String to use for comparison.",
                                        "inputType": "list",
                                        "label": "comparison_strings",
                                        "name": "comparison_strings",
                                        "placeholder": "comparison_strings",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "custom_list_value_in_strings",
                                "name": "custom_list_value_in_strings"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "custom_list_value_in_strings": {
                                "comparison_strings": "extract_email_from_emailheaders:custom_function_result.data.*.email_address",
                                "custom_list": "VIP"
                            }
                        }
                    },
                    "errors": {},
                    "id": "23",
                    "type": "utility",
                    "x": 90,
                    "y": 311.99999999999994
                },
                "24": {
                    "data": {
                        "advanced": {
                            "customName": "VIP path",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "add_tag_vip_to_email_artifact",
                                "matching_email_with_list"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "noop",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 6,
                        "functionName": "vip_path",
                        "id": "24",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "noop": {
                                "description": "Do nothing and return nothing. Use this if you want to do something in a custom function setup section or leave a placeholder block in a playbook. This does not sleep or wait and will return as soon as possible.",
                                "fields": [],
                                "label": "noop",
                                "name": "noop"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "noop": {}
                        }
                    },
                    "errors": {},
                    "id": "24",
                    "type": "utility",
                    "x": 90,
                    "y": 1000
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "extract domain from DKIM Signature",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "extract_domain_from_dkim_signature",
                        "id": "25",
                        "inputParameters": [
                            "artifact:*.cef.emailHeaders.DKIM-Signature",
                            "extract_email_from_emailheaders:custom_function_result.data.*.domain"
                        ],
                        "outputVariables": [
                            "dkim_domain_check_result"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import re\n    phantom.debug(container_artifact_cef_item_0)\n    phantom.debug(extract_email_from_emailheaders_data___domain)\n    domain_regex = r'(((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\\.(xn--)?([a-z0-9\\-]{1,61}|[a-z0-9-]{1,30}\\.[a-z]{2,}))'\n    for domain in re.findall(domain_regex, str(container_artifact_cef_item_0), re.IGNORECASE):\n        phantom.debug(domain[0])\n        dkim_domain = domain[0]\n        \n    if dkim_domain == extract_email_from_emailheaders_data___domain[0]:\n        phantom.debug('same Domain')\n        extract_domain_from_dkim_signature__dkim_domain_check_result = True\n        \n    else:\n        phantom.debug('not same Domainn')\n        extract_domain_from_dkim_signature__dkim_domain_check_result = False\n    \n",
                    "x": 90,
                    "y": 1148
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "DKIM check ",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "extract_domain_from_dkim_signature:custom_function:dkim_domain_check_result",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "True",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "False",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "dkim_check",
                        "id": "27",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "decision",
                    "x": 170,
                    "y": 1312
                },
                "31": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "scope": "all"
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_update",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 12,
                        "functionName": "artifact_update_12",
                        "id": "31",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_update": {
                                "description": "Update an artifact with the specified attributes. All parameters are optional, except that cef_field and cef_value must both be provided if one is provided.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom artifact id"
                                        ],
                                        "description": "ID of the artifact to update, which is required.",
                                        "inputType": "item",
                                        "label": "artifact_id",
                                        "name": "artifact_id",
                                        "placeholder": "1234",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the name of the artifact.",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the label of the artifact.",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Change the severity of the artifact. Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional, but only operational if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_update",
                                "name": "artifact_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_update": {
                                "artifact_id": "create_email_artefact:custom_function_result.data.artifact_id",
                                "cef_data_type": null,
                                "cef_field": null,
                                "cef_value": null,
                                "input_json": null,
                                "label": null,
                                "name": null,
                                "severity": null,
                                "tags": "convert_tag_list_into_string:custom_function:tag_str_list"
                            }
                        }
                    },
                    "errors": {},
                    "id": "31",
                    "type": "utility",
                    "x": -200,
                    "y": 1860
                },
                "32": {
                    "data": {
                        "advanced": {
                            "customName": "DKIM path",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "vip_path",
                                "artifact_update_12"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "noop",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 13,
                        "functionName": "dkim_path",
                        "id": "32",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "noop": {
                                "description": "Do nothing and return nothing. Use this if you want to do something in a custom function setup section or leave a placeholder block in a playbook. This does not sleep or wait and will return as soon as possible.",
                                "fields": [],
                                "label": "noop",
                                "name": "noop"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "noop": {}
                        }
                    },
                    "errors": {},
                    "id": "32",
                    "type": "utility",
                    "x": 90,
                    "y": 2000
                },
                "38": {
                    "data": {
                        "advanced": {
                            "customName": "convert tag list into string",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "convert_tag_list_into_string",
                        "id": "38",
                        "inputParameters": [
                            "create_email_artefact:custom_function_result.data.artifact_id"
                        ],
                        "outputVariables": [
                            "tag_str_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "38",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(create_email_artefact_data_artifact_id[0])\n    url = phantom.build_phantom_rest_url('artifact', create_email_artefact_data_artifact_id[0], 'tags')\n    response = phantom.requests.get(url,verify=False,)\n    phantom.debug(\"phantom returned status code {} with message {}\".format(response.status_code, response.text))\n    \n    artifatc_tag_list = response.json()['tags']\n    phantom.debug('Tags from Artifakts {}'.format(artifatc_tag_list))\n    \n    # this builds the Tag list\n    #lat_list = [item for sublist in artifatc_tag_list for item in sublist]\n    #phantom.debug(lat_list)\n    \n    tag_list = ','.join(artifatc_tag_list)\n    \n    convert_tag_list_into_string__tag_str_list = tag_list + ', internal'\n\n",
                    "x": -200,
                    "y": 1600
                },
                "40": {
                    "data": {
                        "advanced": {
                            "customName": "search vor Company Keywords in email address",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "search_vor_company_keywords_in_email_address",
                        "id": "40",
                        "inputParameters": [
                            "Company_Keywords",
                            "extract_email_from_emailheaders:custom_function_result.data.*.email_address"
                        ],
                        "outputVariables": [
                            "match_count",
                            "miss_count",
                            "matches_keyword_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "40",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import re\n    \n    matches = []\n    misses = []  \n    matches_keyword_list = []\n    \n    success, message, c_keywoards = phantom.get_list(list_name=input_parameter_0)\n    # phantom.debug('phantom.get_list results: success: {}, message: {}, execs: {}'.format(success, message, c_keywoards))\n    keywoard_list = [item for sublist in c_keywoards for item in sublist]\n    \n    # phantom.debug(keywoard_list)\n    \n    for item in keywoard_list:\n        ergebnis = re.findall(item, extract_email_from_emailheaders_data___email_address[0], re.IGNORECASE)\n        #phantom.debug(len(ergebnis))\n        for x in ergebnis:\n            if ergebnis != -1:\n                matches.append({\"match\": x})\n                matches_keyword_list.append(item)\n            else:\n                misses.append({\"miss\": x})\n                \n    match_count = len(matches)\n    miss_count = len(misses)\n    \n    phantom.debug('Match Count {}'.format(match_count))\n    \n    phantom.debug(type(match_count))\n    phantom.debug(miss_count)\n    phantom.debug(matches_keyword_list)\n\n    search_vor_company_keywords_in_email__match_count = int(match_count)\n    search_vor_company_keywords_in_email__miss_count = int(miss_count)\n    search_vor_company_keywords_in_email__matches_keyword_list = matches_keyword_list\n",
                    "x": 90,
                    "y": 2148
                },
                "41": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "search_vor_company_keywords_in_email:custom_function:match_count",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "match count groesser 0",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "decision_3",
                        "id": "41",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "41",
                    "type": "decision",
                    "x": 180,
                    "y": 2300
                },
                "44": {
                    "data": {
                        "advanced": {
                            "customName": "create email artefact",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_create",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 18,
                        "functionName": "create_email_artefact",
                        "id": "44",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_create": {
                                "description": "Create a new artifact with the specified attributes.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container which the artifact will be added to.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the new artifact, which is optional and defaults to \"artifact\".",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The label of the new artifact, which is optional and defaults to \"events\"",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "The severity of the new artifact, which is optional and defaults to \"Medium\". Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the created artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either \"true\" or \"false\", depending on whether or not the new artifact should trigger the execution of any playbooks that are set to active on the label of the container the artifact will be added to. Optional and defaults to \"false\".",
                                        "inputType": "item",
                                        "label": "run_automation",
                                        "name": "run_automation",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_create",
                                "name": "artifact_create"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_create": {
                                "cef_data_type": null,
                                "cef_field": "from",
                                "cef_value": "format_email_in_str:formatted_data",
                                "container": "container:id",
                                "input_json": null,
                                "label": " artifact",
                                "name": "Sender email address",
                                "run_automation": null,
                                "severity": "low",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "44",
                    "type": "utility",
                    "x": 80,
                    "y": 159.99999999999997
                },
                "45": {
                    "data": {
                        "advanced": {
                            "customName": "format email in str",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "format_email_in_str",
                        "id": "45",
                        "parameters": [
                            "extract_email_from_emailheaders:custom_function_result.data.*.email_address"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "45",
                    "type": "format",
                    "x": 80,
                    "y": 59.99999999999997
                },
                "47": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_update",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 19,
                        "functionName": "artifact_update_19",
                        "id": "47",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_update": {
                                "description": "Update an artifact with the specified attributes. All parameters are optional, except that cef_field and cef_value must both be provided if one is provided.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom artifact id"
                                        ],
                                        "description": "ID of the artifact to update, which is required.",
                                        "inputType": "item",
                                        "label": "artifact_id",
                                        "name": "artifact_id",
                                        "placeholder": "1234",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the name of the artifact.",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the label of the artifact.",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Change the severity of the artifact. Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional, but only operational if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_update",
                                "name": "artifact_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_update": {
                                "artifact_id": "create_email_artefact:custom_function_result.data.artifact_id",
                                "cef_data_type": null,
                                "cef_field": "matches_keyword_list",
                                "cef_value": "search_vor_company_keywords_in_email:custom_function:matches_keyword_list",
                                "input_json": null,
                                "label": null,
                                "name": null,
                                "severity": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "47",
                    "type": "utility",
                    "x": -80.00000000000001,
                    "y": 2540
                },
                "48": {
                    "data": {
                        "advanced": {
                            "customName": "filter  Email Artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.name",
                                        "value": "Email Artifact"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": " Email Artifact",
                                "logic": "and"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "filter_email_artifact",
                        "id": "48",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "48",
                    "type": "filter",
                    "x": 140,
                    "y": -200
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.5",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-03-02T07:32:00.529766+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}