{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                }
            ],
            "hash": "74afc6b1584dc92423324d20e5721864dd40f703",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1240,
                    "y": 420
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "filter URL Artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.name",
                                        "value": "URL Artifact"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_url_artifact",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "x": 1040,
                    "y": 544.5
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "Separate a URL into components ",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "url_parse",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 1,
                        "functionName": "separate_a_url_into_components",
                        "id": "3",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "url_parse": {
                                "description": "Separate a URL into its components using urlparse() from the urllib module of Python 3.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "url"
                                        ],
                                        "description": "The URL to parse",
                                        "inputType": "item",
                                        "label": "input_url",
                                        "name": "input_url",
                                        "placeholder": "artifact:*.cef.requestUrl",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "url_parse",
                                "name": "url_parse"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "url_parse": {
                                "input_url": "filtered-data:filter_url_artifact:condition_1:artifact:*.cef.requestURL"
                            }
                        }
                    },
                    "errors": {},
                    "id": "3",
                    "type": "utility",
                    "x": 980,
                    "y": 764.5
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.5",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-03-03T08:22:05.759075+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}