{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_3_to_port_6",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_6_to_port_9",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_1",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "e76e9713f19e2f249f71baabf3c482d9e7c3aa6f",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1020,
                    "y": 219.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1020,
                    "y": 1640
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "filter Email Artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.name",
                                        "value": "Email Artifact"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_email_artifact",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "x": 1060,
                    "y": 360
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "keyword search in Subject",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "keyword_search",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 1,
                        "functionName": "keyword_search_in_subject",
                        "id": "3",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "keyword_search": {
                                "description": "this CF uses a custom list and searches in a string for the elements from the list.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "liste_name",
                                        "name": "liste_name",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "string_searched",
                                        "name": "string_searched",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "keyword_search",
                                "name": "keyword_search"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "keyword_search": {
                                "liste_name": "Suspicious_keywords",
                                "string_searched": "filtered-data:filter_email_artifact:condition_1:artifact:*.cef.emailHeaders.Subject"
                            }
                        }
                    },
                    "errors": {},
                    "id": "3",
                    "type": "utility",
                    "x": 1000,
                    "y": 760
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "keyword search in decodedSubject",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "keyword_search",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 2,
                        "functionName": "keyword_search_in_decodedsubject",
                        "id": "4",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "keyword_search": {
                                "description": "this CF uses a custom list and searches in a string for the elements from the list.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "liste_name",
                                        "name": "liste_name",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "string_searched",
                                        "name": "string_searched",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "keyword_search",
                                "name": "keyword_search"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "keyword_search": {
                                "liste_name": "Suspicious_keywords",
                                "string_searched": "filtered-data:filter_email_artifact:condition_1:artifact:*.cef.emailHeaders.decodedSubject"
                            }
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "type": "utility",
                    "x": 1520,
                    "y": 740
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "keyword_search_in_subject:custom_function_result.data.match_count_result",
                                        "value": "True"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "True",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "False",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "6",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "decision",
                    "x": 1080,
                    "y": 960
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "Create Subject artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_create",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 3,
                        "functionName": "create_subject_artifact",
                        "id": "7",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_create": {
                                "description": "Create a new artifact with the specified attributes.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container which the artifact will be added to.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the new artifact, which is optional and defaults to \"artifact\".",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The label of the new artifact, which is optional and defaults to \"events\"",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "The severity of the new artifact, which is optional and defaults to \"Medium\". Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the created artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either \"true\" or \"false\", depending on whether or not the new artifact should trigger the execution of any playbooks that are set to active on the label of the container the artifact will be added to. Optional and defaults to \"false\".",
                                        "inputType": "item",
                                        "label": "run_automation",
                                        "name": "run_automation",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_create",
                                "name": "artifact_create"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_create": {
                                "cef_data_type": null,
                                "cef_field": "subject",
                                "cef_value": "filtered-data:filter_email_artifact:condition_1:artifact:*.cef.emailHeaders.Subject",
                                "container": "container:id",
                                "input_json": null,
                                "label": "artifact",
                                "name": "eMail Subject",
                                "run_automation": null,
                                "severity": "Low",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "type": "utility",
                    "x": 780,
                    "y": 1160
                },
                "8": {
                    "data": {
                        "action": "update artifact",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Phantom",
                        "connectorConfigs": [
                            "phantom"
                        ],
                        "connectorId": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_artifact_1",
                        "id": "8",
                        "parameters": {
                            "artifact_id": "create_subject_artifact:custom_function_result.data.artifact_id",
                            "cef_json": {
                                "functionId": 1,
                                "parameters": [
                                    "keyword_search_in_subject:custom_function_result.data.match_keyword_list"
                                ],
                                "template": "{{ \"keywoards_dedetcted\": \"{0}\" }}\n"
                            },
                            "severity": "medium"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "artifact_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "x": 780,
                    "y": 1320
                },
                "9": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "notRequiredJoins": [
                                "keyword_search_in_subject",
                                "update_artifact_1"
                            ]
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "Phishing_Investigation"
                        },
                        "functionId": 4,
                        "functionName": "workbook_task_update_4",
                        "id": "9",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": " Sender analysis",
                                "note_title": "[Automated completion] Sender analysis",
                                "owner": "current",
                                "status": "complete",
                                "task_name": "subject"
                            }
                        }
                    },
                    "errors": {},
                    "id": "9",
                    "type": "utility",
                    "x": 1000,
                    "y": 1464.5
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.5",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-03-10T06:02:34.746620+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}