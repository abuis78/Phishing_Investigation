{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                }
            ],
            "hash": "06bb23d216ce8e4511aacf59618f11e5bd8d83d4",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "detect language",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "detect_language",
                        "id": "2",
                        "inputParameters": [
                            "playbook_input:text_string"
                        ],
                        "outputVariables": [
                            "language"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import urllib\n    phantom.debug(playbook_input_text_string_values[0])\n    phantom.debug(\"---- CONVERT string -----\")\n\n    \n    \n    phantom.debug(\"---- DETECT Language-----\")\n    u1 = 'https://google-translate1.p.rapidapi.com/language/translate/v2/detect'\n    headers =  {\n        'content-type': 'application/x-www-form-urlencoded',\n        'Accept-Encoding': 'application/gzip',\n        'X-RapidAPI-Host': 'google-translate1.p.rapidapi.com',\n        'X-RapidAPI-Key': '44aaaeef79msh75169124fb09b39p153dedjsnab8c1122a6a5'\n      }\n    \n    payload1 = \"q=\" + playbook_input_text_string_values[0] + \"\"\n    \n    response1 = phantom.requests.post(\n        u1,\n        data=payload1, \n        headers=headers,\n        verify=False,\n    )\n\n    # phantom.debug(\"phantom returned status with message {}\".format(response.text))\n    \n    data1 = response1.json()\n    phantom.debug(data1[\"data\"][\"detections\"][0][0][\"language\"])\n    lang = data1[\"data\"][\"detections\"][0][0][\"language\"]\n    \n    phantom.debug(\"---- Translate -----\")\n    \n    u2 = \"https://google-translate1.p.rapidapi.com/language/translate/v2\"\n    \n    payload2 = \"q='\" + playbook_input_text_string_values[0] + \"'&target=de&source=\" + lang\n    \n    response2 = phantom.requests.post(\n        u2,\n        data=payload2, \n        headers=headers,\n        verify=False,\n    )  \n    \n    phantom.debug(\"phantom returned status with message {}\".format(response2.text))\n    \n    data2 = response2.json()\n    phantom.debug(data2[\"data\"][\"translations\"][0][\"translatedText\"])   \n    \n",
                    "x": 980,
                    "y": 560
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "",
                "name": "text_string"
            }
        ],
        "output_spec": [
            {
                "contains": [],
                "datapaths": [],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "text_translation"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.5",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-03-27T06:19:18.308745+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}